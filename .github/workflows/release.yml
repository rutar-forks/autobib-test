name: Release

# necessary to create releases.
permissions:
  contents: write

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUST_BACKTRACE: 1

jobs:
  # initialize the GitHub release itself
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        shell: bash
        run: |
          VERSION_TAG="${{ github.ref_name }}"
          echo "VERSION=${VERSION_TAG:1}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          PACKAGE_VERSION="$(yq '.package.version' Cargo.toml)"
          if [ "$PACKAGE_VERSION" != "$VERSION" ]
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Check that a changelog file with the correct name exists
        shell: bash
        run: |
          CHANGELOG_FILE="docs/changelog/$VERSION.md"
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "Changelog file not found!"
            exit 1
          fi
          echo "CHANGELOG_FILE=$CHANGELOG_FILE" >> $GITHUB_ENV
      - name: Show the changelog file
        run: |
          echo "changelog file is: $CHANGELOG_FILE"
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ github.ref_name }} --draft --verify-tag --title "Autobib $VERSION" --notes-file $CHANGELOG_FILE

  upload-binary:
    needs: create-release
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true

          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            use-cross: false

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false

    env:
      CARGO: cargo

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Overwrite build command env variable
        if: matrix.use-cross
        shell: bash
        run: echo "CARGO=cross" >> $GITHUB_ENV

      - name: Install build deps
        if: matrix.target == 'x86_64-unknown-linux-musl'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        run: ${{ env.CARGO }} build --release --locked --target ${{ matrix.target }}

      - name: Upload the binary to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv target/${{ matrix.target }}/release/autobib target/release/autobib-${{ matrix.target }}
          gh release upload ${{ github.ref_name }} target/release/autobib-${{ matrix.target }}
